(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.jiboProgrammingChallenge = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
var BOARD_PADDING_X = 2;
var BOARD_PADDING_Y = 2;
var class_tile_1 = require("./class_tile");
var Board = (function () {
    function Board(resources, stage, onClickCallback, size, x, y) {
        this.x = x;
        this.y = y;
        this.onClickCallback = onClickCallback;
        this.resources = resources;
        this.stage = stage;
        this.setSize(size);
    }
    Board.prototype.randomize = function () {
        for (var y = 0; y < this.size; ++y) {
            for (var x = 0; x < this.size; ++x) {
                this.tiles[y][x].randomizeDirection();
            }
        }
    };
    Board.prototype.clearCoinMemory = function () {
        for (var y = 0; y < this.size; ++y) {
            for (var x = 0; x < this.size; ++x) {
                this.tiles[y][x].setHasCoinMemory(false);
            }
        }
    };
    Board.prototype.getX = function () { return this.x; };
    Board.prototype.getY = function () { return this.y; };
    Board.prototype.getSize = function () { return this.size; };
    Board.prototype.setPosition = function (x, y) {
        this.x = x;
        this.y = y;
        this.updateTilePositions();
    };
    Board.prototype.setSize = function (value) {
        // Remove old tiles
        for (var y = 0; y < this.size; ++y) {
            for (var x = 0; x < this.size; ++x) {
                this.tiles[y][x].destroy();
            }
        }
        // Set new size
        this.size = value;
        // Create tiles
        this.tiles = [];
        for (var y = 0; y < this.size; ++y) {
            this.tiles[y] = [];
            for (var x = 0; x < this.size; ++x) {
                var tileType = ((x + y) % 2);
                this.tiles[y][x] = new class_tile_1.Tile(this.resources, this.stage, tileType, 0, 0, this.onClickCallback);
            }
        }
        // Setup neighbors
        for (var y = 0; y < this.size; ++y) {
            for (var x = 0; x < this.size; ++x) {
                if (y > 0) {
                    this.tiles[y - 1][x].setNeighbor(2, this.tiles[y][x]);
                }
                if (x > 0) {
                    this.tiles[y][x - 1].setNeighbor(1, this.tiles[y][x]);
                }
                if (y < this.size - 1) {
                    this.tiles[y + 1][x].setNeighbor(0, this.tiles[y][x]);
                }
                if (x < this.size - 1) {
                    this.tiles[y][x + 1].setNeighbor(3, this.tiles[y][x]);
                }
            }
        }
        this.updateTilePositions();
    };
    Board.prototype.updateTilePositions = function () {
        for (var y = 0; y < this.size; ++y) {
            for (var x = 0; x < this.size; ++x) {
                var px = x * (64 + BOARD_PADDING_X) + this.x;
                var py = y * (64 + BOARD_PADDING_Y) + this.y;
                this.tiles[y][x].setPosition(px, py);
            }
        }
    };
    return Board;
}());
exports.Board = Board;
},{"./class_tile":3}],2:[function(require,module,exports){
"use strict";
var Ticker = (function () {
    function Ticker(frameRate, onFrameCallback) {
        this.lastFrameTime = 0;
        this.isRunning = false;
        this.frameRate = frameRate;
        this.onFrameCallback = onFrameCallback;
    }
    Ticker.prototype.start = function () {
        this.isRunning = true;
        this.tickLoop(0);
    };
    Ticker.prototype.pause = function () {
        this.isRunning = false;
    };
    Ticker.prototype.tickLoop = function (timeStamp) {
        // call <onFrameCallback> at <frameRate> intervals
        if (timeStamp - this.lastFrameTime > this.frameRate) {
            this.lastFrameTime = timeStamp;
            this.onFrameCallback();
        }
        // loop
        if (this.isRunning) {
            requestAnimationFrame(this.tickLoop.bind(this));
        }
    };
    return Ticker;
}());
exports.Ticker = Ticker;
},{}],3:[function(require,module,exports){
"use strict";
var COIN_MEMORY_ALPHA = .35;
var Tile = (function () {
    function Tile(resources, stage, tileType, x, y, onClickCallback, direction) {
        if (direction === void 0) { direction = 0; }
        // static
        if (Tile.arrowTextures == null) {
            Tile.arrowTextures = [];
            Tile.arrowTextures[0] = resources.arrow_up.texture;
            Tile.arrowTextures[1] = resources.arrow_right.texture;
            Tile.arrowTextures[2] = resources.arrow_down.texture;
            Tile.arrowTextures[3] = resources.arrow_left.texture;
        }
        // instance
        // state
        this.x = x;
        this.y = y;
        this.direction = direction;
        this.neighbors = [null, null, null, null];
        this.hasCoinMemory = false;
        // tile
        this.tileSprite = new PIXI.Sprite(resources["tile_" + tileType].texture);
        stage.addChild(this.tileSprite);
        this.tileSprite.position.x = x;
        this.tileSprite.position.y = y;
        // arrow
        this.arrowSprite = new PIXI.Sprite(Tile.arrowTextures[direction]);
        this.tileSprite.addChild(this.arrowSprite);
        // Coin memory
        this.coinMemorySprite = new PIXI.Sprite(resources.coin.texture);
        this.tileSprite.addChild(this.coinMemorySprite);
        this.coinMemorySprite.alpha = COIN_MEMORY_ALPHA;
        this.coinMemorySprite.visible = false;
        // mouse
        this.tileSprite.interactive = true;
        this.tileSprite.buttonMode = true;
        this.tileSprite["tile"] = this;
        this.tileSprite.on('mouseup', onClickCallback);
    }
    Tile.prototype.destroy = function () {
        this.tileSprite.destroy();
        this.arrowSprite.destroy();
        this.coinMemorySprite.destroy();
    };
    Tile.prototype.getX = function () { return this.x; };
    Tile.prototype.getY = function () { return this.y; };
    Tile.prototype.getDirection = function () { return this.direction; };
    Tile.prototype.getNeighbor = function (index) { return this.neighbors[index]; };
    Tile.prototype.getPointedNeighbor = function () { return this.neighbors[this.direction]; };
    Tile.prototype.getHasCoinMemory = function () { return this.hasCoinMemory; };
    Tile.prototype.setPosition = function (x, y) {
        this.x = x;
        this.y = y;
        this.tileSprite.position.x = x;
        this.tileSprite.position.y = y;
    };
    Tile.prototype.randomizeDirection = function () {
        var direction = Math.floor(Math.random() * 4);
        this.setDirection(direction);
    };
    Tile.prototype.setDirection = function (value) {
        if (value < 0 || value > 3) {
            return;
        } // TODO: Error reporting
        this.direction = value;
        this.arrowSprite.texture = Tile.arrowTextures[value];
    };
    Tile.prototype.setNeighbor = function (index, neighbor) {
        if (index < 0 || index > 3) {
            return;
        } // TODO: Error reporting
        this.neighbors[index] = neighbor;
    };
    Tile.prototype.setHasCoinMemory = function (value) {
        this.hasCoinMemory = value;
        this.coinMemorySprite.visible = value;
    };
    return Tile;
}());
exports.Tile = Tile;
},{}],4:[function(require,module,exports){
"use strict";
var HELP_OFFSET_X = 10;
var HELP_OFFSET_Y = 10;
var BOARD_POSITION_X = 10;
var BOARD_POSITION_Y = 70;
var BOARD_INITIAL_SIZE = 10;
var FRAME_RATE = 100;
/// <reference path="../typings/index.d.ts" />
var PIXI = require('pixi.js');
//import audio = require('pixi-sound');
var class_board_1 = require("./class_board");
var class_ticker_1 = require("./class_ticker");
// global vars
// system
var renderer = new PIXI.WebGLRenderer(3000, 3000);
var stage = new PIXI.Container();
// game constants
var coinAnimationFrames = [[0, 3, 4, 0], [0, 1, 2, 0], [0, 4, 3, 0], [0, 2, 1, 0]];
// game resources
var resources;
var fontStyle;
var explosionTextures;
var coinTextures;
var helpText;
// game state
var board;
var coin;
var explosion;
var ticker;
function initialize() {
    // System
    document.body.appendChild(renderer.view);
    // Textures
    PIXI.loader
        .add('tile_0', 'images/tile_blue.png')
        .add('tile_1', 'images/tile_green.png')
        .add('arrow_up', 'images/arrow_up.png')
        .add('arrow_right', 'images/arrow_right.png')
        .add('arrow_down', 'images/arrow_down.png')
        .add('arrow_left', 'images/arrow_left.png')
        .add('explosion_1', 'images/explosion_1.png')
        .add('explosion_2', 'images/explosion_2.png')
        .add('explosion_3', 'images/explosion_3.png')
        .add('explosion_4', 'images/explosion_4.png')
        .add('explosion_5', 'images/explosion_5.png')
        .add('coin', 'images/coin.png')
        .add('coin_horizontal1', 'images/coin_horizontal1.png')
        .add('coin_horizontal2', 'images/coin_horizontal2.png')
        .add('coin_vertical1', 'images/coin_vertical1.png')
        .add('coin_vertical2', 'images/coin_vertical2.png')
        .load(function (loader, newResources) {
        resources = newResources;
        setupUi();
        setupBoard();
        setupCoinAndExplosion();
        setupTicker();
    });
}
function setupUi() {
    // Setup style
    fontStyle = new PIXI.TextStyle({
        fontFamily: 'Arial',
        fontSize: 20,
        fill: 'white'
    });
    // Setup help text
    helpText = new PIXI.Text("Click on a tile to drop a coin.\nSee quickly you can find the paths off of the board.", fontStyle);
    helpText.x = HELP_OFFSET_X;
    helpText.y = HELP_OFFSET_Y;
    stage.addChild(helpText);
}
function setupBoard() {
    board = new class_board_1.Board(resources, stage, onBoardClick, BOARD_INITIAL_SIZE, BOARD_POSITION_X, BOARD_POSITION_Y);
    board.randomize();
}
function setupCoinAndExplosion() {
    coinTextures = [];
    coinTextures[0] = resources.coin.texture;
    coinTextures[1] = resources.coin_horizontal1.texture;
    coinTextures[2] = resources.coin_horizontal2.texture;
    coinTextures[3] = resources.coin_vertical1.texture;
    coinTextures[4] = resources.coin_vertical2.texture;
    coin = new PIXI.Sprite(resources.coin.texture);
    coin.frame = -1;
    coin.visible = false;
    stage.addChild(coin);
    explosionTextures = [];
    explosionTextures[0] = resources.explosion_1.texture;
    explosionTextures[1] = resources.explosion_2.texture;
    explosionTextures[2] = resources.explosion_3.texture;
    explosionTextures[3] = resources.explosion_4.texture;
    explosionTextures[4] = resources.explosion_5.texture;
    explosion = new PIXI.Sprite(explosionTextures[0]);
    explosion.frame = -1;
    explosion.visible = false;
    stage.addChild(explosion);
}
function setupTicker() {
    ticker = new class_ticker_1.Ticker(FRAME_RATE, onFrame);
    ticker.start();
}
function onBoardClick(event) {
    var tile = event.target.tile;
    // remove the explosion (if still visible)
    explosion.visible = false;
    // place the coin
    coin.tile = tile;
    coin.position.x = tile.getX();
    coin.position.y = tile.getY();
    coin.direction = tile.getDirection();
    coin.visible = true;
}
function onFrame() {
    // animate coin
    if (coin.visible) {
        coin.frame += 1;
        if (coin.frame > 3) {
            coin.frame = 0;
        }
        coin.texture = coinTextures[coinAnimationFrames[coin.direction][coin.frame]];
    }
    // handle coin movement
    if (coin.visible && coin.frame == 2 && !explosion.visible) {
        var tile = coin.tile;
        // add to coin trail
        coin.tile.setHasCoinMemory(true);
        // Get new position
        var newTile = tile.getPointedNeighbor();
        // Check for trail loop
        if (newTile != null && newTile.getHasCoinMemory()) {
            explosion.visible = true;
        }
        // Remove coin (if applicable)
        if (!newTile || explosion.visible) {
            board.clearCoinMemory();
            if (!explosion.visible) {
                coin.visible = false;
                coin.frame = -1;
            }
        }
        else {
            coin.tile = newTile;
            coin.position.x = newTile.getX();
            coin.position.y = newTile.getY();
            coin.direction = newTile.getDirection();
        }
    }
    // animate explosion
    if (explosion.visible) {
        ++explosion.frame;
        // special frames
        if (explosion.frame == 0) {
            explosion.position = coin.position;
        }
        else if (explosion.frame == 1) {
            coin.visible = false;
            coin.frame = -1;
        }
        // Draw or remove
        if (explosion.frame == 5) {
            explosion.visible = false;
            explosion.frame = -1;
        }
        else {
            explosion.texture = explosionTextures[explosion.frame];
        }
    }
    renderer.render(stage);
}
initialize();
},{"./class_board":1,"./class_ticker":2,"pixi.js":undefined}]},{},[4])(4)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy93YXRjaGlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3Nlci1wYWNrL19wcmVsdWRlLmpzIiwic3JjL2NsYXNzX2JvYXJkLnRzIiwic3JjL2NsYXNzX3RpY2tlci50cyIsInNyYy9jbGFzc190aWxlLnRzIiwic3JjL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQ0NBLElBQU0sZUFBZSxHQUFHLENBQUMsQ0FBQztBQUMxQixJQUFNLGVBQWUsR0FBRyxDQUFDLENBQUM7QUFFMUIsMkJBQXFCLGNBQWMsQ0FBQyxDQUFBO0FBRXBDO0lBQ0ksZUFDUSxTQUFTLEVBQUUsS0FBc0IsRUFDakMsZUFBZSxFQUNmLElBQWEsRUFBRSxDQUFVLEVBQUUsQ0FBVTtRQUN6QyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsSUFBSSxDQUFDLGVBQWUsR0FBRyxlQUFlLENBQUM7UUFDdkMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN2QixDQUFDO0lBRU0seUJBQVMsR0FBaEI7UUFDSSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQztZQUNqQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQztnQkFDakMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1lBQzFDLENB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QyxFQUFFLENBQUM7Z0JBQ2pDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUFDLENBQUM7Z0JBQ25FLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUFDLENBQUM7Z0JBQ25FLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQUMsQ0FBQztnQkFDN0UsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFBQyxDQUFDO1lBQ2pGLENBQUM7UUFDTCxDQUFDO1FBQ0QsSUFBSSxD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QUMsQ0FBQyxTQUFTLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDekIsU0FBUyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQ3JDLENBQUM7UUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2hDLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1lBQ3JCLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDbEIsQ0FBQztRQUNELGlCQUFpQjtRQUNqQixFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdkIsU0FBUyxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7WUFDMUIsU0FBUyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN6QixDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDSixTQUFTLENBQUMsT0FBTyxHQUFHLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMzRCxDQUFDO0lBQ0wsQ0FBQztJQUNELFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDM0IsQ0FBQztBQUVELFVBQVUsRUFBRSxDQUFDIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIlxyXG5jb25zdCBCT0FSRF9QQURESU5HX1ggPSAyO1xyXG5jb25zdCBCT0FSRF9QQURESU5HX1kgPSAyO1xyXG5cclxuaW1wb3J0IHsgVGlsZSB9IGZyb20gXCIuL2NsYXNzX3RpbGVcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBCb2FyZCB7XHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoXHJcbiAgICAgICAgICAgIHJlc291cmNlcywgc3RhZ2UgOiBQSVhJLkNvbnRhaW5lcixcclxuICAgICAgICAgICAgb25DbGlja0NhbGxiYWNrLFxyXG4gICAgICAgICAgICBzaXplIDogbnVtYmVyLCB4IDogbnVtYmVyLCB5IDogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy54ID0geDtcclxuICAgICAgICB0aGlzLnkgPSB5O1xyXG4gICAgICAgIHRoaXMub25DbGlja0NhbGxiYWNrID0gb25DbGlja0NhbGxiYWNrO1xyXG4gICAgICAgIHRoaXMucmVzb3VyY2VzID0gcmVzb3VyY2VzO1xyXG4gICAgICAgIHRoaXMuc3RhZ2UgPSBzdGFnZTtcclxuICAgICAgICB0aGlzLnNldFNpemUoc2l6ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJhbmRvbWl6ZSgpIHtcclxuICAgICAgICBmb3IgKHZhciB5ID0gMDsgeSA8IHRoaXMuc2l6ZTsgKyt5KSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgdGhpcy5zaXplOyArK3gpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudGlsZXNbeV1beF0ucmFuZG9taXplRGlyZWN0aW9uKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNsZWFyQ29pbk1lbW9yeSgpIHtcclxuICAgICAgICBmb3IgKHZhciB5ID0gMDsgeSA8IHRoaXMuc2l6ZTsgKyt5KSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgdGhpcy5zaXplOyArK3gpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudGlsZXNbeV1beF0uc2V0SGFzQ29pbk1lbW9yeShmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldFgoKSA6IG51bWJlciB7IHJldHVybiB0aGlzLng7IH1cclxuICAgIHB1YmxpYyBnZXRZKCkgOiBudW1iZXIgeyByZXR1cm4gdGhpcy55OyB9XHJcbiAgICBwdWJsaWMgZ2V0U2l6ZSgpIDogbnVtYmVyIHsgcmV0dXJuIHRoaXMuc2l6ZTsgfVxyXG5cclxuICAgIHB1YmxpYyBzZXRQb3NpdGlvbih4IDogbnVtYmVyLCB5IDogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy54ID0geDtcclxuICAgICAgICB0aGlzLnkgPSB5O1xyXG4gICAgICAgIHRoaXMudXBkYXRlVGlsZVBvc2l0aW9ucygpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXRTaXplKHZhbHVlIDogbnVtYmVyKSB7XHJcbiAgICAgICAgLy8gUmVtb3ZlIG9sZCB0aWxlc1xyXG4gICAgICAgIGZvciAodmFyIHkgPSAwOyB5IDwgdGhpcy5zaXplOyArK3kpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCB0aGlzLnNpemU7ICsreCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50aWxlc1t5XVt4XS5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gU2V0IG5ldyBzaXplXHJcbiAgICAgICAgdGhpcy5zaXplID0gdmFsdWU7XHJcbiAgICAgICAgLy8gQ3JlYXRlIHRpbGVzXHJcbiAgICAgICAgdGhpcy50aWxlcyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIHkgPSAwOyB5IDwgdGhpcy5zaXplOyArK3kpIHtcclxuICAgICAgICAgICAgdGhpcy50aWxlc1t5XSA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKHZhciB4ID0gMDsgeCA8IHRoaXMuc2l6ZTsgKyt4KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGlsZVR5cGUgPSAoKHggKyB5KSAlIDIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy50aWxlc1t5XVt4XSA9IG5ldyBUaWxlKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc291cmNlcywgdGhpcy5zdGFnZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGlsZVR5cGUsIDAsIDAsIHRoaXMub25DbGlja0NhbGxiYWNrKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBTZXR1cCBuZWlnaGJvcnNcclxuICAgICAgICBmb3IgKHZhciB5ID0gMDsgeSA8IHRoaXMuc2l6ZTsgKyt5KSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgdGhpcy5zaXplOyArK3gpIHtcclxuICAgICAgICAgICAgICAgIGlmICh5ID4gMCkgeyB0aGlzLnRpbGVzW3ktMV1beF0uc2V0TmVpZ2hib3IoMiwgdGhpcy50aWxlc1t5XVt4XSk7IH1cclxuICAgICAgICAgICAgICAgIGlmICh4ID4gMCkgeyB0aGlzLnRpbGVzW3ldW3gtMV0uc2V0TmVpZ2hib3IoMSwgdGhpcy50aWxlc1t5XVt4XSk7IH1cclxuICAgICAgICAgICAgICAgIGlmICh5IDwgdGhpcy5zaXplLTEpIHsgdGhpcy50aWxlc1t5KzFdW3hdLnNldE5laWdoYm9yKDAsIHRoaXMudGlsZXNbeV1beF0pOyB9XHJcbiAgICAgICAgICAgICAgICBpZiAoeCA8IHRoaXMuc2l6ZS0xKSB7IHRoaXMudGlsZXNbeV1beCsxXS5zZXROZWlnaGJvcigzLCB0aGlzLnRpbGVzW3ldW3hdKTsgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudXBkYXRlVGlsZVBvc2l0aW9ucygpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgdXBkYXRlVGlsZVBvc2l0aW9ucygpIHtcclxuICAgICAgICBmb3IgKHZhciB5ID0gMDsgeSA8IHRoaXMuc2l6ZTsgKyt5KSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgdGhpcy5zaXplOyArK3gpIHtcclxuICAgICAgICAgICAgICAgIHZhciBweCA9IHggKiAoNjQgKyBCT0FSRF9QQURESU5HX1gpICsgdGhpcy54O1xyXG4gICAgICAgICAgICAgICAgdmFyIHB5ID0geSAqICg2NCArIEJPQVJEX1BBRERJTkdfWSkgKyB0aGlzLnk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRpbGVzW3ldW3hdLnNldFBvc2l0aW9uKHB4LHB5KTsgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9ICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICAvLyBzdGF0ZVxyXG4gICAgcHJpdmF0ZSB4IDogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSB5IDogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBzaXplIDogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBvbkNsaWNrQ2FsbGJhY2s7XHJcbiAgICBwcml2YXRlIHRpbGVzIDogQXJyYXk8QXJyYXk8VGlsZT4+O1xyXG4gICAgLy8gc3lzdGVtXHJcbiAgICBwcml2YXRlIHJlc291cmNlcztcclxuICAgIHByaXZhdGUgc3RhZ2UgOiBQSVhJLkNvbnRhaW5lcjtcclxufSIsIlxyXG5leHBvcnQgY2xhc3MgVGlja2VyIHtcclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihmcmFtZVJhdGUgOiBudW1iZXIsIG9uRnJhbWVDYWxsYmFjaykge1xyXG4gICAgICAgIHRoaXMubGFzdEZyYW1lVGltZSA9IDA7XHJcbiAgICAgICAgdGhpcy5pc1J1bm5pbmcgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmZyYW1lUmF0ZSA9IGZyYW1lUmF0ZTtcclxuICAgICAgICB0aGlzLm9uRnJhbWVDYWxsYmFjayA9IG9uRnJhbWVDYWxsYmFjaztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhcnQoKSB7XHJcbiAgICAgICAgdGhpcy5pc1J1bm5pbmcgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMudGlja0xvb3AoMCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHBhdXNlKCkge1xyXG4gICAgICAgIHRoaXMuaXNSdW5uaW5nID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHRpY2tMb29wKHRpbWVTdGFtcCkge1xyXG4gICAgICAgIC8vIGNhbGwgPG9uRnJhbWVDYWxsYmFjaz4gYXQgPGZyYW1lUmF0ZT4gaW50ZXJ2YWxzXHJcbiAgICAgICAgaWYgKHRpbWVTdGFtcC10aGlzLmxhc3RGcmFtZVRpbWUgPiB0aGlzLmZyYW1lUmF0ZSkge1xyXG4gICAgICAgICAgICB0aGlzLmxhc3RGcmFtZVRpbWUgPSB0aW1lU3RhbXA7XHJcbiAgICAgICAgICAgIHRoaXMub25GcmFtZUNhbGxiYWNrKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGxvb3BcclxuICAgICAgICBpZiAodGhpcy5pc1J1bm5pbmcpIHtcclxuICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMudGlja0xvb3AuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaXNSdW5uaW5nIDogYm9vbGVhbjtcclxuICAgIHByaXZhdGUgbGFzdEZyYW1lVGltZSA6IG51bWJlcjtcclxuICAgIHByaXZhdGUgZnJhbWVSYXRlIDogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBvbkZyYW1lQ2FsbGJhY2s7XHJcbn1cclxuIiwiXHJcbmNvbnN0IENPSU5fTUVNT1JZX0FMUEhBID0gLjM1O1xyXG5cclxuZXhwb3J0IGNsYXNzIFRpbGUge1xyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgICAgIHJlc291cmNlcywgc3RhZ2UgOiBQSVhJLkNvbnRhaW5lcixcclxuICAgICAgICAgICAgdGlsZVR5cGUgOiBudW1iZXIsIHggOiBudW1iZXIsIHkgOiBudW1iZXIsXHJcbiAgICAgICAgICAgIG9uQ2xpY2tDYWxsYmFjaywgZGlyZWN0aW9uIDogbnVtYmVyID0gMCkge1xyXG4gICAgICAgIC8vIHN0YXRpY1xyXG4gICAgICAgIGlmIChUaWxlLmFycm93VGV4dHVyZXMgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBUaWxlLmFycm93VGV4dHVyZXMgPSBbXTtcclxuICAgICAgICAgICAgVGlsZS5hcnJvd1RleHR1cmVzWzBdID0gcmVzb3VyY2VzLmFycm93X3VwLnRleHR1cmU7XHJcbiAgICAgICAgICAgIFRpbGUuYXJyb3dUZXh0dXJlc1sxXSA9IHJlc291cmNlcy5hcnJvd19yaWdodC50ZXh0dXJlO1xyXG4gICAgICAgICAgICBUaWxlLmFycm93VGV4dHVyZXNbMl0gPSByZXNvdXJjZXMuYXJyb3dfZG93bi50ZXh0dXJlO1xyXG4gICAgICAgICAgICBUaWxlLmFycm93VGV4dHVyZXNbM10gPSByZXNvdXJjZXMuYXJyb3dfbGVmdC50ZXh0dXJlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gaW5zdGFuY2VcclxuICAgICAgICAgICAgLy8gc3RhdGVcclxuICAgICAgICAgICAgdGhpcy54ID0geDtcclxuICAgICAgICAgICAgdGhpcy55ID0geTtcclxuICAgICAgICAgICAgdGhpcy5kaXJlY3Rpb24gPSBkaXJlY3Rpb247XHJcbiAgICAgICAgICAgIHRoaXMubmVpZ2hib3JzID0gW251bGwsIG51bGwsIG51bGwsIG51bGxdO1xyXG4gICAgICAgICAgICB0aGlzLmhhc0NvaW5NZW1vcnkgPSBmYWxzZTtcclxuICAgICAgICAgICAgLy8gdGlsZVxyXG4gICAgICAgICAgICB0aGlzLnRpbGVTcHJpdGUgPSBuZXcgUElYSS5TcHJpdGUocmVzb3VyY2VzW1widGlsZV9cIiArIHRpbGVUeXBlXS50ZXh0dXJlKTtcclxuICAgICAgICAgICAgc3RhZ2UuYWRkQ2hpbGQodGhpcy50aWxlU3ByaXRlKTtcclxuICAgICAgICAgICAgdGhpcy50aWxlU3ByaXRlLnBvc2l0aW9uLnggPSB4O1xyXG4gICAgICAgICAgICB0aGlzLnRpbGVTcHJpdGUucG9zaXRpb24ueSA9IHk7XHJcbiAgICAgICAgICAgIC8vIGFycm93XHJcbiAgICAgICAgICAgIHRoaXMuYXJyb3dTcHJpdGUgPSBuZXcgUElYSS5TcHJpdGUoVGlsZS5hcnJvd1RleHR1cmVzW2RpcmVjdGlvbl0pO1xyXG4gICAgICAgICAgICB0aGlzLnRpbGVTcHJpdGUuYWRkQ2hpbGQodGhpcy5hcnJvd1Nwcml0ZSk7XHJcbiAgICAgICAgICAgIC8vIENvaW4gbWVtb3J5XHJcbiAgICAgICAgICAgIHRoaXMuY29pbk1lbW9yeVNwcml0ZSA9IG5ldyBQSVhJLlNwcml0ZShyZXNvdXJjZXMuY29pbi50ZXh0dXJlKTtcclxuICAgICAgICAgICAgdGhpcy50aWxlU3ByaXRlLmFkZENoaWxkKHRoaXMuY29pbk1lbW9yeVNwcml0ZSk7XHJcbiAgICAgICAgICAgIHRoaXMuY29pbk1lbW9yeVNwcml0ZS5hbHBoYSA9IENPSU5fTUVNT1JZX0FMUEhBO1xyXG4gICAgICAgICAgICB0aGlzLmNvaW5NZW1vcnlTcHJpdGUudmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAvLyBtb3VzZVxyXG4gICAgICAgICAgICB0aGlzLnRpbGVTcHJpdGUuaW50ZXJhY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLnRpbGVTcHJpdGUuYnV0dG9uTW9kZSA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMudGlsZVNwcml0ZVtcInRpbGVcIl0gPSB0aGlzO1xyXG4gICAgICAgICAgICB0aGlzLnRpbGVTcHJpdGUub24oJ21vdXNldXAnLCBvbkNsaWNrQ2FsbGJhY2spO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBkZXN0cm95KCkge1xyXG4gICAgICAgIHRoaXMudGlsZVNwcml0ZS5kZXN0cm95KCk7XHJcbiAgICAgICAgdGhpcy5hcnJvd1Nwcml0ZS5kZXN0cm95KCk7XHJcbiAgICAgICAgdGhpcy5jb2luTWVtb3J5U3ByaXRlLmRlc3Ryb3koKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0WCgpIDogbnVtYmVyIHsgcmV0dXJuIHRoaXMueDsgfVxyXG4gICAgcHVibGljIGdldFkoKSA6IG51bWJlciB7IHJldHVybiB0aGlzLnk7IH1cclxuICAgIHB1YmxpYyBnZXREaXJlY3Rpb24oKSA6IG51bWJlciB7IHJldHVybiB0aGlzLmRpcmVjdGlvbjsgfVxyXG4gICAgcHVibGljIGdldE5laWdoYm9yKGluZGV4IDogbnVtYmVyKSA6IFRpbGUgeyByZXR1cm4gdGhpcy5uZWlnaGJvcnNbaW5kZXhdOyB9XHJcbiAgICBwdWJsaWMgZ2V0UG9pbnRlZE5laWdoYm9yKCkgOiBUaWxlIHsgcmV0dXJuIHRoaXMubmVpZ2hib3JzW3RoaXMuZGlyZWN0aW9uXTsgfVxyXG4gICAgcHVibGljIGdldEhhc0NvaW5NZW1vcnkoKSA6IGJvb2xlYW4geyByZXR1cm4gdGhpcy5oYXNDb2luTWVtb3J5OyB9XHJcblxyXG4gICAgcHVibGljIHNldFBvc2l0aW9uKHggOiBudW1iZXIsIHkgOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLnggPSB4O1xyXG4gICAgICAgIHRoaXMueSA9IHk7XHJcbiAgICAgICAgdGhpcy50aWxlU3ByaXRlLnBvc2l0aW9uLnggPSB4O1xyXG4gICAgICAgIHRoaXMudGlsZVNwcml0ZS5wb3NpdGlvbi55ID0geTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmFuZG9taXplRGlyZWN0aW9uKCkge1xyXG4gICAgICAgIHZhciBkaXJlY3Rpb24gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA0KTtcclxuICAgICAgICB0aGlzLnNldERpcmVjdGlvbihkaXJlY3Rpb24pO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXREaXJlY3Rpb24odmFsdWUgOiBudW1iZXIpIHtcclxuICAgICAgICBpZiAodmFsdWUgPCAwIHx8IHZhbHVlID4gMykgeyByZXR1cm47IH0gLy8gVE9ETzogRXJyb3IgcmVwb3J0aW5nXHJcbiAgICAgICAgdGhpcy5kaXJlY3Rpb24gPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLmFycm93U3ByaXRlLnRleHR1cmUgPSBUaWxlLmFycm93VGV4dHVyZXNbdmFsdWVdO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXROZWlnaGJvcihpbmRleCA6IG51bWJlciwgbmVpZ2hib3IgOiBUaWxlKSB7XHJcbiAgICAgICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+IDMpIHsgcmV0dXJuOyB9IC8vIFRPRE86IEVycm9yIHJlcG9ydGluZ1xyXG4gICAgICAgIHRoaXMubmVpZ2hib3JzW2luZGV4XSA9IG5laWdoYm9yO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXRIYXNDb2luTWVtb3J5KHZhbHVlIDogYm9vbGVhbikge1xyXG4gICAgICAgIHRoaXMuaGFzQ29pbk1lbW9yeSA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuY29pbk1lbW9yeVNwcml0ZS52aXNpYmxlID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gU3RhdGVcclxuICAgIHByaXZhdGUgeCA6IG51bWJlcjtcclxuICAgIHByaXZhdGUgeSA6IG51bWJlcjtcclxuICAgIHByaXZhdGUgZGlyZWN0aW9uIDogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBuZWlnaGJvcnMgOiBBcnJheTxUaWxlPjtcclxuICAgIHByaXZhdGUgaGFzQ29pbk1lbW9yeSA6IGJvb2xlYW47XHJcbiAgICAvLyBNZWRpYVxyXG4gICAgcHJpdmF0ZSB0aWxlU3ByaXRlIDogUElYSS5TcHJpdGU7XHJcbiAgICBwcml2YXRlIGFycm93U3ByaXRlIDogUElYSS5TcHJpdGU7XHJcbiAgICBwcml2YXRlIGNvaW5NZW1vcnlTcHJpdGUgOiBQSVhJLlNwcml0ZTtcclxuICAgIC8vIFN0YXRpY1xyXG4gICAgc3RhdGljIGFycm93VGV4dHVyZXMgOiBBcnJheTxQSVhJLlRleHR1cmU+O1xyXG59XHJcbiIsIlxyXG5jb25zdCBIRUxQX09GRlNFVF9YID0gMTA7XHJcbmNvbnN0IEhFTFBfT0ZGU0VUX1kgPSAxMDtcclxuY29uc3QgQk9BUkRfUE9TSVRJT05fWCA9IDEwO1xyXG5jb25zdCBCT0FSRF9QT1NJVElPTl9ZID0gNzA7XHJcbmNvbnN0IEJPQVJEX0lOSVRJQUxfU0laRSA9IDEwO1xyXG5jb25zdCBGUkFNRV9SQVRFID0gMTAwO1xyXG5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3R5cGluZ3MvaW5kZXguZC50c1wiIC8+XHJcbmltcG9ydCBQSVhJID0gcmVxdWlyZSgncGl4aS5qcycpO1xyXG4vL2ltcG9ydCBhdWRpbyA9IHJlcXVpcmUoJ3BpeGktc291bmQnKTtcclxuaW1wb3J0IHsgQm9hcmQgfSBmcm9tIFwiLi9jbGFzc19ib2FyZFwiO1xyXG5pbXBvcnQgeyBUaWxlIH0gZnJvbSBcIi4vY2xhc3NfdGlsZVwiO1xyXG5pbXBvcnQgeyBUaWNrZXIgfSBmcm9tIFwiLi9jbGFzc190aWNrZXJcIjtcclxuXHJcbi8vIGdsb2JhbCB2YXJzXHJcbiAgICAvLyBzeXN0ZW1cclxuICAgIGNvbnN0IHJlbmRlcmVyOlBJWEkuV2ViR0xSZW5kZXJlciA9IG5ldyBQSVhJLldlYkdMUmVuZGVyZXIoMzAwMCwgMzAwMCk7XHJcbiAgICBjb25zdCBzdGFnZTpQSVhJLkNvbnRhaW5lciA9IG5ldyBQSVhJLkNvbnRhaW5lcigpO1xyXG4gICAgXHJcbiAgICAvLyBnYW1lIGNvbnN0YW50c1xyXG4gICAgY29uc3QgY29pbkFuaW1hdGlvbkZyYW1lcyA9IFtbMCwzLDQsMF0sWzAsMSwyLDBdLFswLDQsMywwXSxbMCwyLDEsMF1dO1xyXG4gICAgLy8gZ2FtZSByZXNvdXJjZXNcclxuICAgIGxldCByZXNvdXJjZXM6YW55O1xyXG4gICAgdmFyIGZvbnRTdHlsZTtcclxuICAgIHZhciBleHBsb3Npb25UZXh0dXJlcztcclxuICAgIHZhciBjb2luVGV4dHVyZXM7XHJcbiAgICB2YXIgaGVscFRleHQ7XHJcbiAgICAvLyBnYW1lIHN0YXRlXHJcbiAgICB2YXIgYm9hcmQ7XHJcbiAgICB2YXIgY29pbjtcclxuICAgIHZhciBleHBsb3Npb247XHJcbiAgICB2YXIgdGlja2VyO1xyXG5cclxuZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHtcclxuICAgIC8vIFN5c3RlbVxyXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChyZW5kZXJlci52aWV3KTtcclxuICAgIC8vIFRleHR1cmVzXHJcbiAgICBQSVhJLmxvYWRlclxyXG4gICAgICAgIC5hZGQoJ3RpbGVfMCcsICdpbWFnZXMvdGlsZV9ibHVlLnBuZycpXHJcbiAgICAgICAgLmFkZCgndGlsZV8xJywgJ2ltYWdlcy90aWxlX2dyZWVuLnBuZycpXHJcbiAgICAgICAgLmFkZCgnYXJyb3dfdXAnLCAnaW1hZ2VzL2Fycm93X3VwLnBuZycpXHJcbiAgICAgICAgLmFkZCgnYXJyb3dfcmlnaHQnLCAnaW1hZ2VzL2Fycm93X3JpZ2h0LnBuZycpXHJcbiAgICAgICAgLmFkZCgnYXJyb3dfZG93bicsICdpbWFnZXMvYXJyb3dfZG93bi5wbmcnKVxyXG4gICAgICAgIC5hZGQoJ2Fycm93X2xlZnQnLCAnaW1hZ2VzL2Fycm93X2xlZnQucG5nJylcclxuICAgICAgICAuYWRkKCdleHBsb3Npb25fMScsICdpbWFnZXMvZXhwbG9zaW9uXzEucG5nJylcclxuICAgICAgICAuYWRkKCdleHBsb3Npb25fMicsICdpbWFnZXMvZXhwbG9zaW9uXzIucG5nJylcclxuICAgICAgICAuYWRkKCdleHBsb3Npb25fMycsICdpbWFnZXMvZXhwbG9zaW9uXzMucG5nJylcclxuICAgICAgICAuYWRkKCdleHBsb3Npb25fNCcsICdpbWFnZXMvZXhwbG9zaW9uXzQucG5nJylcclxuICAgICAgICAuYWRkKCdleHBsb3Npb25fNScsICdpbWFnZXMvZXhwbG9zaW9uXzUucG5nJylcclxuICAgICAgICAuYWRkKCdjb2luJywgICAgJ2ltYWdlcy9jb2luLnBuZycpXHJcbiAgICAgICAgLmFkZCgnY29pbl9ob3Jpem9udGFsMScsICAgICdpbWFnZXMvY29pbl9ob3Jpem9udGFsMS5wbmcnKVxyXG4gICAgICAgIC5hZGQoJ2NvaW5faG9yaXpvbnRhbDInLCAgICAnaW1hZ2VzL2NvaW5faG9yaXpvbnRhbDIucG5nJylcclxuICAgICAgICAuYWRkKCdjb2luX3ZlcnRpY2FsMScsICAgICdpbWFnZXMvY29pbl92ZXJ0aWNhbDEucG5nJylcclxuICAgICAgICAuYWRkKCdjb2luX3ZlcnRpY2FsMicsICAgICdpbWFnZXMvY29pbl92ZXJ0aWNhbDIucG5nJylcclxuICAgICAgICAubG9hZChmdW5jdGlvbiAobG9hZGVyOlBJWEkubG9hZGVycy5Mb2FkZXIsIG5ld1Jlc291cmNlczphbnkpIHtcclxuICAgICAgICAgICAgcmVzb3VyY2VzID0gbmV3UmVzb3VyY2VzO1xyXG4gICAgICAgICAgICBzZXR1cFVpKCk7XHJcbiAgICAgICAgICAgIHNldHVwQm9hcmQoKTtcclxuICAgICAgICAgICAgc2V0dXBDb2luQW5kRXhwbG9zaW9uKCk7XHJcbiAgICAgICAgICAgIHNldHVwVGlja2VyKCk7XHJcbiAgICAgICAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNldHVwVWkoKSB7XHJcbiAgICAvLyBTZXR1cCBzdHlsZVxyXG4gICAgZm9udFN0eWxlID0gbmV3IFBJWEkuVGV4dFN0eWxlKHtcclxuICAgICAgICBmb250RmFtaWx5OiAnQXJpYWwnLFxyXG4gICAgICAgIGZvbnRTaXplOiAyMCxcclxuICAgICAgICBmaWxsOiAnd2hpdGUnLFxyXG4gICAgfSk7XHJcbiAgICAvLyBTZXR1cCBoZWxwIHRleHRcclxuICAgIGhlbHBUZXh0ID0gbmV3IFBJWEkuVGV4dChcIkNsaWNrIG9uIGEgdGlsZSB0byBkcm9wIGEgY29pbi5cXG5TZWUgcXVpY2tseSB5b3UgY2FuIGZpbmQgdGhlIHBhdGhzIG9mZiBvZiB0aGUgYm9hcmQuXCIsIGZvbnRTdHlsZSk7XHJcbiAgICBoZWxwVGV4dC54ID0gSEVMUF9PRkZTRVRfWDtcclxuICAgIGhlbHBUZXh0LnkgPSBIRUxQX09GRlNFVF9ZO1xyXG4gICAgc3RhZ2UuYWRkQ2hpbGQoaGVscFRleHQpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzZXR1cEJvYXJkKCkge1xyXG4gICAgYm9hcmQgPSBuZXcgQm9hcmQoXHJcbiAgICAgICAgICAgIHJlc291cmNlcywgc3RhZ2UsIG9uQm9hcmRDbGljayxcclxuICAgICAgICAgICAgQk9BUkRfSU5JVElBTF9TSVpFLCBCT0FSRF9QT1NJVElPTl9YLCBCT0FSRF9QT1NJVElPTl9ZKTtcclxuICAgIGJvYXJkLnJhbmRvbWl6ZSgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzZXR1cENvaW5BbmRFeHBsb3Npb24oKSB7XHJcbiAgICBjb2luVGV4dHVyZXMgPSBbXTtcclxuICAgIGNvaW5UZXh0dXJlc1swXSA9IHJlc291cmNlcy5jb2luLnRleHR1cmU7XHJcbiAgICBjb2luVGV4dHVyZXNbMV0gPSByZXNvdXJjZXMuY29pbl9ob3Jpem9udGFsMS50ZXh0dXJlO1xyXG4gICAgY29pblRleHR1cmVzWzJdID0gcmVzb3VyY2VzLmNvaW5faG9yaXpvbnRhbDIudGV4dHVyZTtcclxuICAgIGNvaW5UZXh0dXJlc1szXSA9IHJlc291cmNlcy5jb2luX3ZlcnRpY2FsMS50ZXh0dXJlO1xyXG4gICAgY29pblRleHR1cmVzWzRdID0gcmVzb3VyY2VzLmNvaW5fdmVydGljYWwyLnRleHR1cmU7XHJcblxyXG4gICAgY29pbiA9IG5ldyBQSVhJLlNwcml0ZShyZXNvdXJjZXMuY29pbi50ZXh0dXJlKTtcclxuICAgIGNvaW4uZnJhbWUgPSAtMTtcclxuICAgIGNvaW4udmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgc3RhZ2UuYWRkQ2hpbGQoY29pbik7XHJcblxyXG4gICAgZXhwbG9zaW9uVGV4dHVyZXMgPSBbXTtcclxuICAgIGV4cGxvc2lvblRleHR1cmVzWzBdID0gcmVzb3VyY2VzLmV4cGxvc2lvbl8xLnRleHR1cmU7XHJcbiAgICBleHBsb3Npb25UZXh0dXJlc1sxXSA9IHJlc291cmNlcy5leHBsb3Npb25fMi50ZXh0dXJlO1xyXG4gICAgZXhwbG9zaW9uVGV4dHVyZXNbMl0gPSByZXNvdXJjZXMuZXhwbG9zaW9uXzMudGV4dHVyZTtcclxuICAgIGV4cGxvc2lvblRleHR1cmVzWzNdID0gcmVzb3VyY2VzLmV4cGxvc2lvbl80LnRleHR1cmU7XHJcbiAgICBleHBsb3Npb25UZXh0dXJlc1s0XSA9IHJlc291cmNlcy5leHBsb3Npb25fNS50ZXh0dXJlO1xyXG5cclxuICAgIGV4cGxvc2lvbiA9IG5ldyBQSVhJLlNwcml0ZShleHBsb3Npb25UZXh0dXJlc1swXSk7XHJcbiAgICBleHBsb3Npb24uZnJhbWUgPSAtMTtcclxuICAgIGV4cGxvc2lvbi52aXNpYmxlID0gZmFsc2U7XHJcbiAgICBzdGFnZS5hZGRDaGlsZChleHBsb3Npb24pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzZXR1cFRpY2tlcigpIHtcclxuICAgIHRpY2tlciA9IG5ldyBUaWNrZXIoRlJBTUVfUkFURSwgb25GcmFtZSk7XHJcbiAgICB0aWNrZXIuc3RhcnQoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gb25Cb2FyZENsaWNrKGV2ZW50KSB7XHJcbiAgICB2YXIgdGlsZSA9IGV2ZW50LnRhcmdldC50aWxlO1xyXG4gICAgLy8gcmVtb3ZlIHRoZSBleHBsb3Npb24gKGlmIHN0aWxsIHZpc2libGUpXHJcbiAgICBleHBsb3Npb24udmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgLy8gcGxhY2UgdGhlIGNvaW5cclxuICAgIGNvaW4udGlsZSA9IHRpbGU7IFxyXG4gICAgY29pbi5wb3NpdGlvbi54ID0gdGlsZS5nZXRYKCk7XHJcbiAgICBjb2luLnBvc2l0aW9uLnkgPSB0aWxlLmdldFkoKTtcclxuICAgIGNvaW4uZGlyZWN0aW9uID0gdGlsZS5nZXREaXJlY3Rpb24oKTtcclxuICAgIGNvaW4udmlzaWJsZSA9IHRydWU7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG9uRnJhbWUoKSB7XHJcbiAgICAvLyBhbmltYXRlIGNvaW5cclxuICAgIGlmIChjb2luLnZpc2libGUpIHtcclxuICAgICAgY29pbi5mcmFtZSArPSAxO1xyXG4gICAgICBpZiAoY29pbi5mcmFtZSA+IDMpIHsgY29pbi5mcmFtZSA9IDA7IH1cclxuICAgICAgY29pbi50ZXh0dXJlID0gY29pblRleHR1cmVzW2NvaW5BbmltYXRpb25GcmFtZXNbY29pbi5kaXJlY3Rpb25dW2NvaW4uZnJhbWVdXTtcclxuICAgIH1cclxuICAgIC8vIGhhbmRsZSBjb2luIG1vdmVtZW50XHJcbiAgICBpZiAoY29pbi52aXNpYmxlICYmIGNvaW4uZnJhbWUgPT0gMiAmJiAhZXhwbG9zaW9uLnZpc2libGUpIHtcclxuICAgICAgICB2YXIgdGlsZSA9IGNvaW4udGlsZTtcclxuICAgICAgICAvLyBhZGQgdG8gY29pbiB0cmFpbFxyXG4gICAgICAgICAgY29pbi50aWxlLnNldEhhc0NvaW5NZW1vcnkodHJ1ZSk7XHJcbiAgICAgICAgLy8gR2V0IG5ldyBwb3NpdGlvblxyXG4gICAgICAgIHZhciBuZXdUaWxlID0gdGlsZS5nZXRQb2ludGVkTmVpZ2hib3IoKTtcclxuICAgICAgICAvLyBDaGVjayBmb3IgdHJhaWwgbG9vcFxyXG4gICAgICAgIGlmIChuZXdUaWxlICE9IG51bGwgJiYgbmV3VGlsZS5nZXRIYXNDb2luTWVtb3J5KCkpIHtcclxuICAgICAgICAgICAgZXhwbG9zaW9uLnZpc2libGUgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBSZW1vdmUgY29pbiAoaWYgYXBwbGljYWJsZSlcclxuICAgICAgICBpZiAoIW5ld1RpbGUgfHwgZXhwbG9zaW9uLnZpc2libGUpIHtcclxuICAgICAgICAgICAgYm9hcmQuY2xlYXJDb2luTWVtb3J5KCk7XHJcbiAgICAgICAgICAgIGlmICghZXhwbG9zaW9uLnZpc2libGUpIHtcclxuICAgICAgICAgICAgICAgIGNvaW4udmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgY29pbi5mcmFtZSA9IC0xO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgLy8gbW92ZSBjb2luXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29pbi50aWxlID0gbmV3VGlsZTtcclxuICAgICAgICAgICAgY29pbi5wb3NpdGlvbi54ID0gbmV3VGlsZS5nZXRYKCk7XHJcbiAgICAgICAgICAgIGNvaW4ucG9zaXRpb24ueSA9IG5ld1RpbGUuZ2V0WSgpO1xyXG4gICAgICAgICAgICBjb2luLmRpcmVjdGlvbiA9IG5ld1RpbGUuZ2V0RGlyZWN0aW9uKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gYW5pbWF0ZSBleHBsb3Npb25cclxuICAgIGlmIChleHBsb3Npb24udmlzaWJsZSkge1xyXG4gICAgICAgICsrZXhwbG9zaW9uLmZyYW1lO1xyXG4gICAgICAgIC8vIHNwZWNpYWwgZnJhbWVzXHJcbiAgICAgICAgaWYgKGV4cGxvc2lvbi5mcmFtZSA9PSAwKSB7XHJcbiAgICAgICAgICBleHBsb3Npb24ucG9zaXRpb24gPSBjb2luLnBvc2l0aW9uO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoZXhwbG9zaW9uLmZyYW1lID09IDEpIHtcclxuICAgICAgICAgIGNvaW4udmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgY29pbi5mcmFtZSA9IC0xO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBEcmF3IG9yIHJlbW92ZVxyXG4gICAgICAgIGlmIChleHBsb3Npb24uZnJhbWUgPT0gNSkge1xyXG4gICAgICAgICAgICBleHBsb3Npb24udmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBleHBsb3Npb24uZnJhbWUgPSAtMTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBleHBsb3Npb24udGV4dHVyZSA9IGV4cGxvc2lvblRleHR1cmVzW2V4cGxvc2lvbi5mcmFtZV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmVuZGVyZXIucmVuZGVyKHN0YWdlKTtcclxufVxyXG5cclxuaW5pdGlhbGl6ZSgpO1xyXG4iXX0=
