(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.jiboProgrammingChallenge = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
var BOARD_PADDING_X = 2;
var BOARD_PADDING_Y = 2;
var class_tile_1 = require("./class_tile");
var Board = (function () {
    function Board(resources, stage, onClickCallback, size, x, y) {
        this.x = x;
        this.y = y;
        this.onClickCallback = onClickCallback;
        this.resources = resources;
        this.stage = stage;
        this.setSize(size);
    }
    Board.prototype.randomize = function () {
        for (var y = 0; y < this.size; ++y) {
            for (var x = 0; x < this.size; ++x) {
                this.tiles[y][x].randomizeArrowType();
            }
        }
    };
    Board.prototype.clearCoinMemory = function () {
        for (var y = 0; y < this.size; ++y) {
            for (var x = 0; x < this.size; ++x) {
                this.tiles[y][x].setHasCoinMemory(false);
            }
        }
    };
    Board.prototype.getX = function () { return this.x; };
    Board.prototype.getY = function () { return this.y; };
    Board.prototype.getSize = function () { return this.size; };
    Board.prototype.setPosition = function (x, y) {
        this.x = x;
        this.y = y;
        this.updateTilePositions();
    };
    Board.prototype.setSize = function (value) {
        // Remove old tiles
        for (var y = 0; y < this.size; ++y) {
            for (var x = 0; x < this.size; ++x) {
                this.tiles[y][x].destroy();
            }
        }
        // Set new size
        this.size = value;
        // Create tiles
        this.tiles = [];
        for (var y = 0; y < this.size; ++y) {
            this.tiles[y] = [];
            for (var x = 0; x < this.size; ++x) {
                var tileType = ((x + y) % 2);
                this.tiles[y][x] = new class_tile_1.Tile(this.resources, this.stage, tileType, 0, 0, this.onClickCallback);
            }
        }
        // Setup neighbors
        for (var y = 0; y < this.size; ++y) {
            for (var x = 0; x < this.size; ++x) {
                if (y > 0) {
                    this.tiles[y - 1][x].setNeighbor(2, this.tiles[y][x]);
                }
                if (x > 0) {
                    this.tiles[y][x - 1].setNeighbor(1, this.tiles[y][x]);
                }
                if (y < this.size - 1) {
                    this.tiles[y + 1][x].setNeighbor(0, this.tiles[y][x]);
                }
                if (x < this.size - 1) {
                    this.tiles[y][x + 1].setNeighbor(3, this.tiles[y][x]);
                }
            }
        }
        this.updateTilePositions();
    };
    Board.prototype.updateTilePositions = function () {
        for (var y = 0; y < this.size; ++y) {
            for (var x = 0; x < this.size; ++x) {
                var px = x * (64 + BOARD_PADDING_X) + this.x;
                var py = y * (64 + BOARD_PADDING_Y) + this.y;
                this.tiles[y][x].setPosition(px, py);
            }
        }
    };
    return Board;
}());
exports.Board = Board;
},{"./class_tile":2}],2:[function(require,module,exports){
"use strict";
var COIN_MEMORY_ALPHA = .35;
var Tile = (function () {
    function Tile(resources, stage, tileType, x, y, onClickCallback, arrowType) {
        if (arrowType === void 0) { arrowType = 0; }
        // static
        if (Tile.arrowTextures == null) {
            Tile.arrowTextures = [];
            Tile.arrowTextures[0] = resources.arrow_up.texture;
            Tile.arrowTextures[1] = resources.arrow_right.texture;
            Tile.arrowTextures[2] = resources.arrow_down.texture;
            Tile.arrowTextures[3] = resources.arrow_left.texture;
        }
        // instance
        // state
        this.x = x;
        this.y = y;
        this.arrowType = arrowType;
        this.neighbors = [null, null, null, null];
        this.hasCoinMemory = false;
        // tile
        this.tileSprite = new PIXI.Sprite(resources["tile_" + tileType].texture);
        stage.addChild(this.tileSprite);
        this.tileSprite.position.x = x;
        this.tileSprite.position.y = y;
        // arrow
        this.arrowSprite = new PIXI.Sprite(Tile.arrowTextures[arrowType]);
        this.tileSprite.addChild(this.arrowSprite);
        // Coin memory
        this.coinMemorySprite = new PIXI.Sprite(resources.coin.texture);
        this.tileSprite.addChild(this.coinMemorySprite);
        this.coinMemorySprite.alpha = COIN_MEMORY_ALPHA;
        this.coinMemorySprite.visible = false;
        // mouse
        this.tileSprite.interactive = true;
        this.tileSprite.buttonMode = true;
        this.tileSprite["tile"] = this;
        this.tileSprite.on('mouseup', onClickCallback);
    }
    Tile.prototype.destroy = function () {
        this.tileSprite.destroy();
        this.arrowSprite.destroy();
        this.coinMemorySprite.destroy();
    };
    Tile.prototype.getX = function () { return this.x; };
    Tile.prototype.getY = function () { return this.y; };
    Tile.prototype.getArrowType = function () { return this.arrowType; };
    Tile.prototype.getNeighbor = function (index) { return this.neighbors[index]; };
    Tile.prototype.getPointedNeighbor = function () { return this.neighbors[this.arrowType]; };
    Tile.prototype.getHasCoinMemory = function () { return this.hasCoinMemory; };
    Tile.prototype.setPosition = function (x, y) {
        this.x = x;
        this.y = y;
        this.tileSprite.position.x = x;
        this.tileSprite.position.y = y;
    };
    Tile.prototype.randomizeArrowType = function () {
        var type = Math.floor(Math.random() * 4);
        this.setArrowType(type);
    };
    Tile.prototype.setArrowType = function (value) {
        if (value < 0 || value > 3) {
            return;
        } // TODO: Error reporting
        this.arrowType = value;
        this.arrowSprite.texture = Tile.arrowTextures[value];
    };
    Tile.prototype.setNeighbor = function (index, neighbor) {
        if (index < 0 || index > 3) {
            return;
        } // TODO: Error reporting
        this.neighbors[index] = neighbor;
    };
    Tile.prototype.setHasCoinMemory = function (value) {
        this.hasCoinMemory = value;
        this.coinMemorySprite.visible = value;
    };
    return Tile;
}());
exports.Tile = Tile;
},{}],3:[function(require,module,exports){
"use strict";
var HELP_OFFSET_X = 10;
var HELP_OFFSET_Y = 10;
var BOARD_POSITION_X = 10;
var BOARD_POSITION_Y = 70;
var BOARD_INITIAL_SIZE = 10;
var FRAME_SPEED = 100;
/// <reference path="../typings/index.d.ts" />
var PIXI = require('pixi.js');
//import audio = require('pixi-sound');
var class_board_1 = require("./class_board");
// global vars
// system
var renderer = new PIXI.WebGLRenderer(3000, 3000);
var stage = new PIXI.Container();
// game constants
var coinAnimationFrames = [[0, 3, 4, 0], [0, 1, 2, 0], [0, 4, 3, 0], [0, 2, 1, 0]];
// game resources
var resources;
var fontStyle;
var explosionTextures;
var coinTextures;
var helpText;
// game state
var board;
var coin;
var explosion;
var frameTime = 0;
function initialize() {
    // System
    document.body.appendChild(renderer.view);
    // Textures
    PIXI.loader
        .add('tile_0', 'images/tile_blue.png')
        .add('tile_1', 'images/tile_green.png')
        .add('arrow_up', 'images/arrow_up.png')
        .add('arrow_right', 'images/arrow_right.png')
        .add('arrow_down', 'images/arrow_down.png')
        .add('arrow_left', 'images/arrow_left.png')
        .add('explosion_1', 'images/explosion_1.png')
        .add('explosion_2', 'images/explosion_2.png')
        .add('explosion_3', 'images/explosion_3.png')
        .add('explosion_4', 'images/explosion_4.png')
        .add('explosion_5', 'images/explosion_5.png')
        .add('coin', 'images/coin.png')
        .add('coin_horizontal1', 'images/coin_horizontal1.png')
        .add('coin_horizontal2', 'images/coin_horizontal2.png')
        .add('coin_vertical1', 'images/coin_vertical1.png')
        .add('coin_vertical2', 'images/coin_vertical2.png')
        .load(function (loader, newResources) {
        resources = newResources;
        setupTextureResources();
        setupUi();
        setupBoard();
        setupCoinAndExplosion();
        runMainLoop(0);
    });
}
function setupTextureResources() {
    explosionTextures = [];
    explosionTextures[0] = resources.explosion_1.texture;
    explosionTextures[1] = resources.explosion_2.texture;
    explosionTextures[2] = resources.explosion_3.texture;
    explosionTextures[3] = resources.explosion_4.texture;
    explosionTextures[4] = resources.explosion_5.texture;
    coinTextures = [];
    coinTextures[0] = resources.coin.texture;
    coinTextures[1] = resources.coin_horizontal1.texture;
    coinTextures[2] = resources.coin_horizontal2.texture;
    coinTextures[3] = resources.coin_vertical1.texture;
    coinTextures[4] = resources.coin_vertical2.texture;
}
function setupUi() {
    // Setup style
    fontStyle = new PIXI.TextStyle({
        fontFamily: 'Arial',
        fontSize: 20,
        fill: 'white'
    });
    // Setup help text
    helpText = new PIXI.Text("Click on a tile to drop a coin.\nSee quickly you can find the paths off of the board.", fontStyle);
    helpText.x = HELP_OFFSET_X;
    helpText.y = HELP_OFFSET_Y;
    stage.addChild(helpText);
}
function setupBoard() {
    board = new class_board_1.Board(resources, stage, onBoardClick, BOARD_INITIAL_SIZE, BOARD_POSITION_X, BOARD_POSITION_Y);
    board.randomize();
}
function setupCoinAndExplosion() {
    coin = new PIXI.Sprite(resources.coin.texture);
    coin.frame = -1;
    coin.visible = false;
    stage.addChild(coin);
    explosion = new PIXI.Sprite(explosionTextures[0]);
    explosion.frame = -1;
    explosion.visible = false;
    stage.addChild(explosion);
}
function onBoardClick(event) {
    var tile = event.target.tile;
    // remove the explosion (if still visible)
    explosion.visible = false;
    // place the coin
    coin.tile = tile;
    coin.position.x = tile.getX();
    coin.position.y = tile.getY();
    coin.direction = tile.getArrowType();
    coin.visible = true;
}
function runFrameLogic() {
    // animate coin
    if (coin.visible) {
        coin.frame += 1;
        if (coin.frame > 3) {
            coin.frame = 0;
        }
        coin.texture = coinTextures[coinAnimationFrames[coin.direction][coin.frame]];
    }
    // handle coin movement
    if (coin.visible && coin.frame == 2 && !explosion.visible) {
        var tile = coin.tile;
        // add to coin trail
        coin.tile.setHasCoinMemory(true);
        // Get new position
        var newTile = tile.getPointedNeighbor();
        // Check for trail loop
        if (newTile != null && newTile.getHasCoinMemory()) {
            explosion.visible = true;
        }
        // Remove coin (if applicable)
        if (!newTile || explosion.visible) {
            board.clearCoinMemory();
            if (!explosion.visible) {
                coin.visible = false;
                coin.frame = -1;
            }
        }
        else {
            coin.tile = newTile;
            coin.position.x = newTile.getX();
            coin.position.y = newTile.getY();
            coin.direction = newTile.getArrowType();
        }
    }
    // animate explosion
    if (explosion.visible) {
        ++explosion.frame;
        // special frames
        if (explosion.frame == 0) {
            explosion.position = coin.position;
        }
        else if (explosion.frame == 1) {
            coin.visible = false;
            coin.frame = -1;
        }
        // Draw or remove
        if (explosion.frame == 5) {
            explosion.visible = false;
            explosion.frame = -1;
        }
        else {
            explosion.texture = explosionTextures[explosion.frame];
        }
    }
}
function runMainLoop(timeStamp) {
    // call "runFrameLogic()" at FRAME_SPEED intervals
    if (timeStamp - frameTime > FRAME_SPEED) {
        frameTime = timeStamp;
        runFrameLogic();
    }
    // Render and loop
    renderer.render(stage);
    requestAnimationFrame(runMainLoop);
}
initialize();
},{"./class_board":1,"pixi.js":undefined}]},{},[3])(3)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
